#!/usr/bin/env ruby

require 'fileutils'
require 'json'
require 'crypt/blowfish'
require 'digest/md5'
require 'highline/import'

$:.unshift(File.expand_path(File.dirname(__FILE__) + '/../lib/'))
$:.unshift(File.expand_path(File.dirname(__FILE__) + '/../lib/'))

command = ARGV[0]

def usage
	puts "\033[1mUsage: mojura new\033[0m"
	puts "\033[1mUsage: mojura run [api|webapp] [request]\033[0m\n"
	puts "Author: Taco Jan Osinga"
	puts "Date: 2013-11-14\n"
	puts "Use one of the following commands:"
	puts "  \033[1mnew\033[0m     Creates a new Mojura project in the current folder."
	puts "  \033[1mversion\033[0m Shows the current version of Mojura."
	puts "  \033[1mdigest\033[0m  Asks a username, password and uses the current or given realm to create a digest and a blowfish variant."
	puts "  \033[1mrun\033[0m     Runs Mojura outside a webinterface, ideal for quick testing. Use the following parameters:"
	puts "               \033[1mapi\033[0m       Runs the API";
	puts "               \033[1mwebapp\033[0m    Runs the Webapp";
	puts "          Use the request paramater to run Mojura with a specific request."
end

def run
	require 'mojura'
	type = ARGV[1] || 'web'
	request = ARGV[2] || ''

	request, params = request.split('?', 2)
	request ||= ''
	params ||= ''
	params = Rack::Utils.parse_query(params)
	params.symbolize_keys!

	puts "Request: #{request}\nParams: #{params. to_s}"

	env = {'rack.session' => {}, 'rack.request.cookie_hash' => {}}
	MojuraAPI::API.load
	MojuraAPI::API.init_thread(env)

	if type == 'api'
		result = JSON.pretty_generate(MojuraAPI::API.call(request, params, (params[:_method] || :get)))
	else
		result = MojuraWebApp::WebApp.render(request, params)
	end

	puts "#{result}"
end

def new
	realm = ARGV[1] || File.basename(Dir.getwd).downcase
	database = ARGV[2] || realm

	puts "Constructing a basic file structure."
	defaults_dir = File.expand_path(File.dirname(__FILE__) + '/../lib/defaults/*')
	FileUtils.cp_r(Dir.glob(defaults_dir), './')
	dirs = %w(api api/lib api/resources webapp/ext uploads tmp)
	dirs.each { | dir | FileUtils.mkdir(dir) }
	FileUtils.touch('tmp/restart.txt')

	puts "Generating project_settings.yaml with realm #{realm} and database #{database}."
	project_settings = File.read('./project_settings.yaml')
	project_settings.gsub!(/___REALM___/, realm)
	project_settings.gsub!(/___DATABASE___/, database)
	File.open('./project_settings.yaml', 'w') { | file | file.write(project_settings) }
end

def version
	version = `gem spec mojura version`[/(\d+.\d+.\d+)/]
	puts version
end

def digest
	realm = ARGV[1] || File.basename(Dir.getwd).downcase
	username = ask('Username: ')
	password = ask('Password: ') { | q | q.echo = '*' }

	digest = Digest::MD5.hexdigest("#{username}:#{realm}:#{password}").to_s
	puts 'Digest: ' + digest;
	blowfish = Crypt::Blowfish.new('5t9WXHqboKGMDRZ3').encrypt_string(digest).unpack('H*')[0]
	puts 'Blowfish: ' + blowfish

end

case command
	when 'new' then new
	when 'run' then run
	when 'version' then version
	when 'digest' then digest
	else usage
end